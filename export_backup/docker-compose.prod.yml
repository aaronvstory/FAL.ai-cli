# Production Docker Compose with enhanced security and monitoring
# Use with: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d

version: '3.8'

services:
  
  # ========================================================================
  #                         Production Overrides                          
  # ========================================================================
  
  app:
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - WORKERS=4
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '4.0'
          memory: 4G
        reservations:
          cpus: '2.0'
          memory: 2G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./config/redis-prod.conf:/usr/local/etc/redis/redis.conf
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # ========================================================================
  #                         Additional Services                           
  # ========================================================================
  
  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: fal-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - app-network
    restart: unless-stopped

  # Redis Exporter for Redis metrics
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: fal-redis-exporter
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - app-network
    restart: unless-stopped
    depends_on:
      - redis

  # Nginx Exporter for web server metrics
  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:latest
    container_name: fal-nginx-exporter
    ports:
      - "9113:9113"
    command:
      - -nginx.scrape-uri=http://nginx:80/nginx_status
    networks:
      - app-network
    restart: unless-stopped
    depends_on:
      - nginx

  # Log aggregation
  loki:
    image: grafana/loki:latest
    container_name: fal-loki
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
      - ./config/loki-config.yml:/etc/loki/local-config.yaml
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - app-network
    restart: unless-stopped

  # Log shipper
  promtail:
    image: grafana/promtail:latest
    container_name: fal-promtail
    volumes:
      - /var/log:/var/log:ro
      - ./config/promtail-config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    networks:
      - app-network
    restart: unless-stopped
    depends_on:
      - loki

  # Alertmanager for notifications
  alertmanager:
    image: prom/alertmanager:latest
    container_name: fal-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - alertmanager_data:/alertmanager
      - ./config/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--web.route-prefix=/'
    networks:
      - app-network
    restart: unless-stopped

# ========================================================================
#                           Additional Volumes                          
# ========================================================================

volumes:
  loki_data:
    driver: local
  alertmanager_data:
    driver: local